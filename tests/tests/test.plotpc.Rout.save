> # test.plotpc: test earth with a biggish model
> 
> library(plotpc)
Loading required package: grid
> library(grid)
> if(!interactive())
+     postscript(width=6, height=6)
> options(warn=1) # print warnings as they occur
> 
> example(plotpc)

plotpc> data(iris)

plotpc> x <- iris[,c(3,4)] # select Petal.Length and Petal.Width

plotpc> plotpc(x, main="Example 1\n")

plotpc> # example with some parameters and showing densities
plotpc> plotpc(x,
plotpc+        main="Example 2:\nPrincipal component densities\n",
plotpc+        hist=FALSE,                    # plot densities not histograms
plotpc+        adjust=.5,                     # finer resolution in the density plots
plotpc+        gp.axis=gpar(lty=3),           # gpar of axes
plotpc+        heightx=0,                     # don't display x histogram
plotpc+        heighty=0,                     # don't display y histogram
plotpc+        text1="Principal Component 1", # text above hist for 1st principal component
plotpc+        text2="Principal Component 2", # text above hist for 2nd principal component
plotpc+        axis.len2=4,                   # length of 2nd principal axis (in std devs)
plotpc+        offset1=2.5,                   # offset of component 1 density plot
plotpc+        offset2=5)                     # offset of component 2 density plot

plotpc> # example using "angles"
plotpc> vp <- plotpc(x,
plotpc+        main="Example 3:\nProjections\n",
plotpc+        xrange=25,      # give ourselves some space
plotpc+        heightx=0,      # don't display x histogram
plotpc+        heighty=0,      # don't display y histogram
plotpc+        angle3=-60,     # project at -60 degrees
plotpc+        angle4=-25,     # project at -25 degrees
plotpc+        angle5=20,      # project at 20 degrees
plotpc+        angle6=70)      # project at 70 degrees

plotpc> # add text to the graph, can use native coords
plotpc> pushViewport(vp)

plotpc> grid.text("Projections at\nvarious angles",
plotpc+           x=unit(10, "native"), y=unit(12.5, "native"),
plotpc+           gp=gpar(col="red"))

plotpc> popViewport()

plotpc> # example showing principal axes
plotpc> x <- iris[iris$Species=="versicolor",c(3,4)]

plotpc> vp <- plotpc(x,
plotpc+        main="Example 4:\nPrincipal axes with confidence ellipse\n",
plotpc+        sd.ellipse=2,                       # ellipse at two standard devs
plotpc+        heightx=0, heighty=0, height1=0, height2=0, # no histograms
plotpc+        gp.ellipse=gpar(col=1),             # ellipse in black
plotpc+        axis.lenx=4, axis.leny=5,           # lengthen horiz and vertical axes
plotpc+        axis.len1=4, gp.axis1=gpar(col=1),  # lengthen pc1 axis, draw in black
plotpc+        axis.len2=8, gp.axis2=gpar(col=1))  # lengthen pc2 axis, draw in black

plotpc> pushViewport(vp) # add text to the graph

plotpc> un <- function(x) unit(x, "native")

plotpc> grid.text("PC1", x=un(2.2), y=un(.6),   gp=gpar(cex=.8, font=2))

plotpc> grid.text("PC2", x=un(3.9), y=un(2.35), gp=gpar(cex=.8, font=2))

plotpc> grid.text("X1",  x=un(2.2), y=un(1.4),  gp=gpar(cex=.8, font=2))

plotpc> grid.text("X2",  x=un(4.3), y=un(2.5),  gp=gpar(cex=.8, font=2))

plotpc> popViewport()

plotpc> # example comparing linear regression to principal component
plotpc> x <- iris[iris$Species=="setosa",c(3,4)]

plotpc> vp <- plotpc(x,
plotpc+        main="Example 5:\nRegression lines and\nfirst principal component",
plotpc+        heightx=0, heighty=0, height1=0, height2=0, # no histograms
plotpc+        gp.points=gpar(col="steelblue"),      # color of points
plotpc+        axis.len1=4,  gp.axis1=gpar(col="gray", lwd=3),
plotpc+        axis.len2=.15, gp.axis2=gpar(col=1),  # just a little blip of an axis
plotpc+        yonx=TRUE, xony=TRUE)                 # display regression lines

plotpc> pushViewport(vp) # add text to the principal component line

plotpc> grid.text("PC1", x=unit(.8, "native"), y=unit(0, "native"),
plotpc+           gp=gpar(col="gray", cex=.8, font=2))

plotpc> popViewport()
> example(plotld)

plotld> data(iris)

plotld> x <- iris[, -5] # -5 to drop Species

plotld> plotld(x)
> 
> data(iris)
> 
> # reproduce pairs plot from help page
> pc <- princomp(iris[,-5]) # -5 to drop Species
> pairs(pc$scores, col=c(2,3,4)[unclass(iris$Species)])
> 
> x <- iris[,c(4,3)] # select Petal.Width and Petal.Length
> plotpc(x, main="test plotpc",
+        xrange=14,
+        breaks1=5, gp.hist1=gpar(col="gray", fill=0), height1=1,
+        offset1=NULL,
+        breaks2=6, gp.hist2=gpar(col=1, fill="gray"),
+        offset2=5, height2=-.5, flip2=TRUE,
+        breaksx=20, gp.histx=gpar(col="red", fill=0), heightx=2,
+        heighty=0)
> 
> library(alr3) # get banknote data
> data(banknote)
> plotld(banknote[,-7], npc=10) # -6 to drop Y
> 
> # Flury and Riedwyl "Multivariate Statistics A Practical Approach" figure 10.2
> x <- banknote[101:200,4:5] # select Forged, Top and Bottom
> plotpc(x, main="Figure 10.2: The projection\nwith the largest variance\n",
+        breaks=12, height1=-2, offset1=5, height2=0)
> 
> # Flury and Riedwyl figure 10.3
> x <- banknote[101:200,4:5] # select Forged, Top and Bottom
> plotpc(x, main="Figure 10.3\nProjections associated with principal\ncomponents in two dimensions",
+        heightx=0, heighty=0, breaks=12,
+        axis.len1=0, height1=-1,
+        axis.len2=0, height2=-4, offset2=7.5)
> 
> # Flury and Riedwyl figure 10.4
> x <- banknote[101:200,4:5] # select Forged, Top and Bottom
> vp <- plotpc(x, main="Figure 10.4: Principal axes", heightx=0, heighty=0, breaks=12,
+              axis.lenx=5, axis.leny=5,
+              axis.len1=4, gp.axis1=gpar(col=1), height1=0,
+              axis.len2=6, gp.axis2=gpar(col=1), height2=0)
> pushViewport(vp)
> grid.text("U1", x=unit(5.8, "native"), y=unit(13.6, "native"), gp=gpar(cex=.8, font=2))
> grid.text("U2", x=unit(12, "native"), y=unit(14, "native"), gp=gpar(cex=.8, font=2))
> grid.text("X4", x=unit(16.8, "native"), y=unit(11.2, "native"), gp=gpar(cex=.8, font=2))
> grid.text("X5", x=unit(10.6, "native"), y=unit(14.8, "native"), gp=gpar(cex=.8, font=2))
> popViewport()
> 
> # Flury and Riedwyl figure 10.13
> x <- banknote[101:200,4:5] # select Forged, Top and Bottom
> vp <- plotpc(x, main="Figure 10.13\nRegression lines and\nfirst principal component",
+              heightx=0, heighty=0, height1=0, height2=0,
+              gp.points=gpar(cex=.6, col="gray"), pch=1,
+              axis.len1=4, gp.axis1=gpar(col=1),
+              axis.len2=.2, gp.axis2=gpar(col=1),
+              yonx=TRUE, xony=TRUE)
> pushViewport(vp)
> grid.text("PC1", x=unit(6.5, "native"), y=unit(13.4, "native"), gp=gpar(cex=.8, font=2))
> popViewport()
> 
> # Flury and Riedwyl figure 7.1 simple version
> x <- banknote[,4:5] # select Top and Bottom
> plotpc(x, xrange=24, main="Figure 7.1: Various projections\n(simple version)\n",
+        height=-2,  # reverse directions of histograms to match Flury and Riedwyl
+        breaks=12, heightx=0, heighty=0, height1=0, height2=0, axis.len1=0, axis.len2=0,
+        angle3=30, angle4=102, angle5=174, angle6=246, angle7=318)
> 
> if(!interactive()) {
+     dev.off()         # finish postscript plot
+     q(runLast=FALSE)  # needed else R prints the time on exit (R2.5 and higher) which messes up the diffs
+ }
